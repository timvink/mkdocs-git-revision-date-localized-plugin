{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#mkdocs-git-revision-date-localized-plugin","title":"mkdocs-git-revision-date-localized-plugin","text":"<p>MkDocs plugin that enables displaying the date of the last git modification of a page. The plugin uses babel and timeago.js to provide different localized date formats. Works with <code>mkdocs-material</code>, see adding a git repository.</p> <p></p> <p>(Example when used together with the mkdocs-material theme)</p>"},{"location":"#setup","title":"Setup","text":"<p>Install the plugin using <code>pip3</code> with the following command:</p> <pre><code>pip3 install mkdocs-git-revision-date-localized-plugin\n</code></pre> <p>Next, add the following lines to your <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n  - search\n  - git-revision-date-localized\n</code></pre> <p>If you have no <code>plugins</code> entry in your config file yet, you'll likely also want to add the <code>search</code> plugin. MkDocs enables it by default if there is no <code>plugins</code> entry set.</p> <p>The mkdocs-material theme supports <code>git-revision-date-localized</code>. After installing the plugin and updating your <code>mkdocs.yml</code> you should see the last revision date on the bottom of your pages. Other mkdocs themes require additional customization.</p> <p>See the documentation on how to fine-tune the appearance and the date format.</p>"},{"location":"#note-when-using-build-systems-like-github-actions","title":"Note when using build systems like Github Actions","text":"<p>This plugin needs access to the last commit that touched a specific file to be able to retrieve the date. By default many CI/CD build systems only retrieve the last commit, which means you might need to change your CI/CD settings:</p> <ul> <li>Github Actions: set <code>fetch-depth</code> to <code>0</code> (docs)</li> <li>Gitlab Runners: set <code>GIT_DEPTH</code> to <code>0</code> (docs)</li> <li>Bitbucket pipelines: set <code>clone: depth: full</code> (docs)</li> <li>Azure Devops pipelines: set <code>Agent.Source.Git.ShallowFetchDepth</code> to something very high like <code>10e99</code> (docs)</li> </ul> <p>Tip: You can speed up your builds for large codebases by running git garbage collection (<code>git gc</code>) occasionly. You can also use sparse checkouts to only apply the fetch-depth 0 for the folders we're interested (credits Martin in this tweet):</p> <pre><code># example sparse checkout for github actions\n- uses: actions/checkout@v4\n  with:\n    fetch-depth: 0\n    sparse-checkout: |\n      docs\n      includes\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>See timvink.github.io/mkdocs-git-revision-date-localized-plugin.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are very welcome! Please read CONTRIBUTING.md before putting in any work.</p>"},{"location":"#related-mkdocs-plugins","title":"Related MkDocs plugins:","text":"<ul> <li>mkdocs-git-authors-plugin for displaying the authors from git</li> <li>mkdocs-git-committers-plugin-2 for displaying authors' github user profiles</li> <li>mkdocs-document-dates for displaying dates based on file creation and modification dates.</li> <li>Initial fork from mkdocs-git-revision-date-plugin.</li> </ul>"},{"location":"available-variables/","title":"Available variables","text":"<p>This plugin offers the following timestamp variables:</p> variable description <code>git_revision_date_localized</code> Last git commit that touched a file. Enabled by default. <code>git_creation_date_localized</code> First git commit that touched a file. Enable in options. <code>git_site_revision_date_localized</code> Last git commit that touched any file in the <code>docs/</code> folder. Enabled by default. <p>You can use these variables wrapped in curly brackets (<code>{{</code> and <code>}}</code>) anywhere in a markdown file, like so:</p> <pre><code>This page was last updated: *{{ git_revision_date_localized }}*\n</code></pre> <p>Example output: This page was last updated 2025-09-09.</p> <p>Changing the <code>type</code>, <code>timezone</code> and/or <code>locale</code> in the options will effect the output of these variables. To change the styling see Applying custom styling.</p>"},{"location":"available-variables/#variables-for-overriding-themes","title":"Variables for overriding themes","text":"<p>If you do not want to include revision dates manually in each markdown file, or if you would like more control on the formatting, you can override a theme. You can use the same three variables but with a <code>page.meta.</code> prefix:</p> <ul> <li><code>page.meta.git_revision_date_localized</code></li> <li><code>page.meta.git_creation_date_localized</code></li> <li><code>page.meta.git_revision_date_localized_raw_date</code></li> </ul> <p>To allow for more flexibility when overriding a theme there are also variables for each different <code>type</code> available (regardless of the setting for <code>type</code> in options), where the output is also not wrapped in <code>&lt;span&gt;</code> elements (so you can do the CSS styling yourself): </p> <ul> <li><code>page.meta.git_revision_date_localized_raw_date</code></li> <li><code>page.meta.git_revision_date_localized_raw_datetime</code></li> <li><code>page.meta.git_revision_date_localized_raw_iso_date</code></li> <li><code>page.meta.git_revision_date_localized_raw_iso_datetime</code></li> <li><code>page.meta.git_revision_date_localized_raw_timeago</code></li> <li><code>page.meta.git_revision_date_localized_raw_custom</code></li> </ul> <p>They are also available on the entire site level:</p> <ul> <li><code>page.meta.git_site_revision_date_localized_raw_datetime</code></li> <li><code>page.meta.git_site_revision_date_localized_raw_iso_date</code></li> <li><code>page.meta.git_site_revision_date_localized_raw_date</code></li> <li><code>page.meta.git_site_revision_date_localized_raw_iso_datetime</code></li> <li><code>page.meta.git_site_revision_date_localized_raw_timeago</code></li> <li><code>page.meta.git_site_revision_date_localized_raw_custom</code></li> </ul> <p>And if you've enabled creation date in the config:</p> <ul> <li><code>page.meta.git_creation_date_localized_raw_date</code></li> <li><code>page.meta.git_creation_date_localized_raw_datetime</code></li> <li><code>page.meta.git_creation_date_localized_raw_iso_date</code></li> <li><code>page.meta.git_creation_date_localized_raw_iso_datetime</code></li> <li><code>page.meta.git_creation_date_localized_raw_timeago</code></li> <li><code>page.meta.git_creation_date_localized_raw_custom</code></li> </ul> <p>We also expose the git hash and the git tag (empty if not tag associated with the commit):</p> <ul> <li><code>page.meta.git_revision_date_localized_hash</code></li> <li><code>page.meta.git_revision_date_localized_tag</code></li> <li><code>page.meta.git_site_revision_date_localized_hash</code></li> <li><code>page.meta.git_site_revision_date_localized_tag</code></li> <li><code>page.meta.git_creation_date_localized_hash</code></li> <li><code>page.meta.git_creation_date_localized_tag</code></li> </ul> <p>timeago.js dependency</p> <p>The <code>*_timeago</code> variables require the timeago.js dependency. This is automatically injected when the option <code>type: timeago</code> is set. Alternatively, you can add timeago.js using the <code>extra_javascript</code> option of MkDocs:</p> <pre><code># mkdocs.yml\nextra_javascript:\n    - js/timeago.min.js\n    - js/timeago_mkdocs_material.js\n</code></pre> <p>You can download both these files from GitHub.</p>"},{"location":"options/","title":"Options","text":"<p>You can customize the plugin by setting options in <code>mkdocs.yml</code>. For example:</p>  mkdocs.yml <pre><code>plugins:\n  - git-revision-date-localized:\n      type: timeago\n      custom_format: \"%d. %B %Y\"\n      timezone: Europe/Amsterdam\n      locale: en\n      fallback_to_build_date: false\n      enable_creation_date: true\n      exclude:\n          - index.md\n      enable_git_follow: true\n      enabled: true\n      strict: true\n      ignored_commits_file: .git-blame-ignore-revs\n</code></pre>"},{"location":"options/#type","title":"<code>type</code>","text":"<p>Default is <code>date</code>. The format of the date to be displayed. Valid values are <code>date</code>, <code>datetime</code>, <code>iso_date</code>, <code>iso_datetime</code>, <code>timeago</code> and <code>custom</code>. Example outputs:</p> <pre><code>November 28, 2019           # type: date (default)\nNovember 28, 2019 13:57:28  # type: datetime\n2019-11-28                  # type: iso_date\n2019-11-28 13:57:26         # type: iso_datetime\n20 hours ago                # type: timeago\n28. November 2019           # type: custom\n</code></pre>"},{"location":"options/#custom_format","title":"<code>custom_format</code>","text":"<p>Default is <code>%d. %B %Y</code>. The date format used when <code>type: custom</code>. Passed to python's <code>strftime</code>, see the cheatsheat for details.</p>"},{"location":"options/#timezone","title":"<code>timezone</code>","text":"<p>Default is <code>UTC</code>. Specify a time zone database name (reference). This option is especially relevant when using <code>type: datetime</code> and <code>type: iso_datetime</code>. Note that when using timeago (with <code>type: timeago</code>) any difference in time zones between server and client will be handled automatically.</p>  mkdocs.yml <pre><code>plugins:\n  - git-revision-date-localized:\n      timezone: Europe/Amsterdam\n</code></pre>"},{"location":"options/#locale","title":"<code>locale</code>","text":"<p>Default is <code>None</code>. Specify a two letter ISO639 language code (f.e. <code>en</code>) or 5-letter language code with added territory/region/country (<code>en_US</code>) to display dates in your preferred language. Note this plugin supports many different ways to specify the locale, but if not specified anywhere the fallback will be English (<code>en</code>). <code>locale</code> is used to translate timestamps to dates when <code>type: date</code> or <code>type: datetime</code> (using babel) as well as to translate datetimes to a relative timeago string when <code>type: timeago</code> (using timeago.js).</p> <p>Example outputs:</p> <pre><code># `locale: en`\nApril 27, 2021                # with `type: date` (default)\nApril 27, 2021 13:11:28       # with `type: datetime`\n2 weeks ago                   # with `type: timeago`\n# `locale: es`\n27 de marzo de 2021           # with `type: date`\n27 de marzo de 2021 13:57:28  # with `type: datetime`\nhace 2 semanas                # with `type: timeago`\n</code></pre>  mkdocs.yml <pre><code>plugins:\n  - git-revision-date-localized:\n      locale: en_US\n</code></pre> <p>Note</p> <p>When using <code>type: timeago</code>, timeago.js is added to your website, which supports these locales. If you specify a locale not supported by timeago.js, the fallback is English (<code>en</code>). It might happen that your specific locale is supported by babel (used by date formats) but not by timeago. In that case open an issue with this plugin.</p>"},{"location":"options/#fallback_to_build_date","title":"<code>fallback_to_build_date</code>","text":"<p>Default is <code>false</code>. Enables falling back to the time when <code>mkdocs build</code> was executed when git is not available. This means the revision date will be incorrect, but this can be acceptable if you want your project to also successfully build in environments with no access to GIT.</p>  mkdocs.yml <pre><code>plugins:\n  - git-revision-date-localized:\n      fallback_to_build_date: true\n</code></pre>"},{"location":"options/#enable_creation_date","title":"<code>enable_creation_date</code>","text":"<p>Default is <code>false</code> (because it has a small effect on build time). Enables a Created date variables, see available variables. This will also add a created date at the bottom of each page in <code>mkdocs-material</code> as it has native support (see overriding a theme).</p>  mkdocs.yml <pre><code>plugins:\n  - git-revision-date-localized:\n      enable_creation_date: true\n</code></pre>"},{"location":"options/#exclude","title":"<code>exclude</code>","text":"<p>Default is empty. Specify a list of page source paths (one per line) that should not have a revision date included (excluded from processing by this plugin). This can be useful for example to remove the revision date from the front page. The source path of a page is relative to your <code>docs/</code> folder. You can also use globs instead of full source paths. To exclude <code>docs/subfolder/page.md</code> specify in your <code>mkdocs.yml</code> a line under <code>exclude:</code> with <code>- subfolder/page.md</code>. Some examples:</p>  mkdocs.yml <pre><code>plugins:\n  - git-revision-date-localized:\n      exclude:\n        - index.md\n        - subfolder/page.md\n        - another_page.md\n        - folder/*\n</code></pre>"},{"location":"options/#enable_git_follow","title":"<code>enable_git_follow</code>","text":"<p>Default is <code>true</code>. When enabled it will use <code>git log --follow</code> to find the git history. This means git will follow changes if you rename or move the file also. Despite being a sensible default, there is a known bug with <code>--follow</code>: if you have committed an empty version of a file, then <code>git log --follow</code> can follow the wrong trail and give wrong results (see this blogpost).</p> <p>When disabled (by setting it to <code>false</code>), each file's history will only consist of its current name and path, it's history from the previous paths or names will not be included.</p>"},{"location":"options/#enabled","title":"<code>enabled</code>","text":"<p>Default is <code>true</code>. Enables you to deactivate this plugin. A possible use case is local development where you might want faster build times and/or do not have git available. It's recommended to use this option with an environment variable together with a default fallback (introduced in <code>mkdocs</code> v1.2.1, see docs). Example:</p>  mkdocs.yml <pre><code>plugins:\n  - git-revision-date-localized:\n      enabled: !ENV [ENABLED_GIT_REVISION_DATE, True]\n</code></pre> <p>Which enables you to disable the plugin locally using:</p> <pre><code>export ENABLED_GIT_REVISION_DATE=false\nmkdocs serve\n</code></pre>"},{"location":"options/#strict","title":"<code>strict</code>","text":"<p>Default is <code>true</code>. When enabled, the logs will show warnings when something is wrong but a fallback has been used. When disabled, the logger will use the INFO level instead.</p> <ul> <li>If you want to raise an error when a warning is logged, use mkdocs strict mode (with <code>mkdocs build --strict</code>).</li> <li>If you are already using mkdocs strict mode, but do not care about these warnings, you can set <code>strict: false</code> to ensure no errors are raised.</li> </ul>  mkdocs.yml <pre><code>plugins:\n  - git-revision-date-localized:\n      strict: true\n</code></pre>"},{"location":"options/#ignored_commits_file","title":"<code>ignored_commits_file</code>","text":"<p>Default is <code>None</code>. You can specify a file path (relative to your <code>mkdocs.yml</code> directory) that contains a list of commit hashes to ignore when determining the revision date. The format of the file is the same as the format of git <code>blame.ignoreRevsFile</code>. This can be useful to ignore specific commits that apply formatting updates or other mass changes to the documents.</p>  mkdocs.yml <pre><code>plugins:\n  - git-revision-date-localized:\n      ignored_commits_file: .git-blame-ignore-revs\n</code></pre>"},{"location":"options/#enable_parallel_processing","title":"<code>enable_parallel_processing</code>","text":"<p>Default is <code>true</code>. When enabled, the plugin will use <code>multiprocessing</code> to iterate through all site files in parallel. Disable if you encounter any errors (and open an issue!).</p>  mkdocs.yml <pre><code>plugins:\n  - git-revision-date-localized:\n      enable_parallel_processing: True\n</code></pre>"},{"location":"howto/custom-styling/","title":"Apply custom styling","text":"<p>You can change the appearance of the revision dates by including extra CSS to your mkdocs site. </p>"},{"location":"howto/custom-styling/#css-classes","title":"CSS Classes","text":"<p>To allow for easier styling date outputs are wrapped in <code>&lt;span&gt;</code> elements with the classes <code>git-revision-date-localized-plugin</code> and <code>git-revision-date-localized-plugin-{type}</code>, where <code>{type}</code> is replaced with the <code>type</code> set in the plugin settings (see options).</p> <p>For example when <code>type: datetime</code> is set, using the following in a markdown file:</p> <pre><code>Last update: {{ git_revision_date_localized }}\n</code></pre> <p>Could output the following HTML:</p> <pre><code>Last update: \n&lt;span class=\"git-revision-date-localized-plugin git-revision-date-localized-plugin-datetime\"&gt;28 November, 2019 13:57:28&lt;/span&gt;\n</code></pre>"},{"location":"howto/custom-styling/#customizing-a-class","title":"Customizing a class","text":"<p>Making all revision dates red is as easy as:</p>  docs/css/extra.css mkdocs.yml <pre><code>.git-revision-date-localized-plugin { color: red; }\n</code></pre> <pre><code>extra_css:\n    css/extra.css\n</code></pre>"},{"location":"howto/override-a-theme/","title":"Customize a theme","text":"<p>You can customize an existing theme by overriding blocks or partials. You might want to do this because your theme is not natively supported, or you would like more control on the formatting. Below are some examples to help get you started.</p>"},{"location":"howto/override-a-theme/#example-default-mkdocs-theme","title":"Example: default <code>mkdocs</code> theme","text":"<p>To add a revision date to the default <code>mkdocs</code> theme, add a <code>overrides/partials</code> folder to your <code>docs</code> folder and update your <code>mkdocs.yml</code> file.  Then you can extend the base <code>mkdocs</code> theme by adding a new file <code>docs/overrides/content.html</code>:</p>  mkdocs.yml docs/overrides/content.html <pre><code>theme:\n    name: mkdocs\n    custom_dir: docs/overrides\n</code></pre> <pre><code>&lt;!-- Overwrites content.html base mkdocs theme, taken from \nhttps://github.com/mkdocs/mkdocs/blob/master/mkdocs/themes/mkdocs/content.html --&gt;\n\n{% if page.meta.source %}\n    &lt;div class=\"source-links\"&gt;\n    {% for filename in page.meta.source %}\n        &lt;span class=\"label label-primary\"&gt;{{ filename }}&lt;/span&gt;\n    {% endfor %}\n    &lt;/div&gt;\n{% endif %}\n\n{{ page.content }}\n\n&lt;!-- This section adds support for localized revision dates --&gt;\n{% if page.meta.git_revision_date_localized %}\n    &lt;small&gt;Last update: {{ page.meta.git_revision_date_localized }}&lt;/small&gt;\n{% endif %}\n{% if page.meta.git_created_date_localized %}\n    &lt;small&gt;Created: {{ page.meta.git_created_date_localized }}&lt;/small&gt;\n{% endif %}\n</code></pre>"},{"location":"howto/override-a-theme/#example-mkdocs-material-theme","title":"Example: <code>mkdocs-material</code> theme","text":"<p>mkdocs-material has built-in support for <code>git_revision_date_localized</code> and <code>git_created_date_localized</code>. You can see that when viewing their <code>source-file.html</code> partial. </p> <p>If you want, you can customize further by extending the mkdocs-material theme and overriding the <code>source-file.html</code> partial as follows:</p>  mkdocs.yml docs/overrides/partials/source-file.html <pre><code>theme:\n    name: 'material'\n    custom_dir: docs/overrides\n</code></pre> <pre><code>{% import \"partials/language.html\" as lang with context %}\n\n&lt;!-- taken from \nhttps://github.com/squidfunk/mkdocs-material/blob/master/src/partials/source-file.html --&gt;\n\n&lt;hr /&gt;\n&lt;div class=\"md-source-file\"&gt;\n&lt;small&gt;\n\n    &lt;!-- mkdocs-git-revision-date-localized-plugin --&gt;\n    {% if page.meta.git_revision_date_localized %}\n    {{ lang.t(\"source.file.date.updated\") }}:\n    {{ page.meta.git_revision_date_localized }}\n    {% if page.meta.git_creation_date_localized %}\n        &lt;br /&gt;\n        {{ lang.t(\"source.file.date.created\") }}:\n        {{ page.meta.git_creation_date_localized }}\n    {% endif %}\n\n    &lt;!-- mkdocs-git-revision-date-plugin --&gt;\n    {% elif page.meta.revision_date %}\n    {{ lang.t(\"source.file.date.updated\") }}:\n    {{ page.meta.revision_date }}\n    {% endif %}\n&lt;/small&gt;\n&lt;/div&gt;\n</code></pre> <p>mkdocs-material also supports custom translations that you can use to specify alternative translations for <code>source.file.date.updated</code> (\"Last updated\") and <code>source.file.date.created</code> (\"Created\"). </p>"},{"location":"howto/override-a-theme/#example-list-last-updated-pages","title":"Example: List last updated pages","text":"<p>Let's say we want to insert a list of the last 10 updated pages into our home page.</p> <p>We can use the mkdocs template variables together with jinja2 filters to extend the mkdocs-material theme. @simbo provided this example that overrides <code>main.html</code>:</p>  mkdocs.yml docs/overrides/main.html <pre><code>theme:\n    name: 'material'\n    custom_dir: docs/overrides\n</code></pre> <pre><code>{% extends \"base.html\" %}\n{% block site_nav %}\n{{ super() }}\n{% if page and page.file and page.file.src_path == \"index.md\" %}\n    &lt;div class=\"md-sidebar md-sidebar--secondary\" data-md-component=\"sidebar\" data-md-type=\"navigation\"&gt;\n    &lt;div class=\"md-sidebar__scrollwrap\"&gt;\n        &lt;div class=\"md-sidebar__inner\"&gt;\n        &lt;nav class=\"md-nav md-nav--secondary md-nav--integrated\" aria-label=\"Recently updated\" data-md-level=\"0\"&gt;\n            &lt;div class=\"md-nav__title\"&gt;Recently updated&lt;/div&gt;\n            &lt;ul class=\"md-nav__list\" data-md-scrollfix&gt;\n            {% for file in (\n                pages\n                | selectattr(\"page.meta.git_revision_date_localized_raw_iso_datetime\")\n                | selectattr(\"page.meta.git_creation_date_localized_raw_iso_datetime\")\n                | sort(attribute=\"page.title\")\n                | sort(attribute=\"page.meta.git_creation_date_localized_raw_iso_datetime\", reverse=true)\n                | sort(attribute=\"page.meta.git_revision_date_localized_raw_iso_datetime\", reverse=true)\n                )[:10]\n            %}\n                &lt;li class=\"md-nav__item\"&gt;\n                &lt;a class=\"md-nav__link\" href=\"{{ file.url }}\" style=\"display:block\"&gt;\n                    {{ file.page.title }}\n                    &lt;br/&gt;\n                    &lt;small&gt;\n                    &lt;span class=\"git-revision-date-localized-plugin git-revision-date-localized-plugin-timeago\"&gt;\n                        &lt;span class=\"timeago\" datetime=\"{{ file.page.meta.git_revision_date_localized_raw_iso_datetime }}\" locale=\"en\"&gt;&lt;/span&gt;\n                    &lt;/span&gt;\n                    &lt;/small&gt;\n                &lt;/a&gt;\n                &lt;/li&gt;\n            {% endfor %}\n            &lt;/ul&gt;\n        &lt;/nav&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;/div&gt;\n{% endif %}\n{% endblock %}\n</code></pre>"},{"location":"howto/override-a-theme/#example-populate-sitemapxml","title":"Example: Populate <code>sitemap.xml</code>","text":"<p>Having a correct lastmod in your <code>sitemap.xml</code> is important for SEO, as it indicates to Search engines when to re-index pages, see this blog from Bing.</p> <p><code>@thesuperzapper</code> shared this override in mkdocs-git-revision-date-localized-plugin#120:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"&gt;\n{%- for file in pages -%}\n    {% if not file.page.is_link and (file.page.abs_url or file.page.canonical_url) %}\n    &lt;url&gt;\n        &lt;loc&gt;{% if file.page.canonical_url %}{{ file.page.canonical_url|e }}{% else %}{{ file.page.abs_url|e }}{% endif %}&lt;/loc&gt;\n        {#- NOTE: we exclude `lastmod` for pages using a template, as their update time is not correctly detected #}\n        {%- if not file.page.meta.template and file.page.meta.git_revision_date_localized_raw_iso_datetime %}\n        &lt;lastmod&gt;{{ (file.page.meta.git_revision_date_localized_raw_iso_datetime + \"+00:00\") | replace(\" \", \"T\") }}&lt;/lastmod&gt;\n        {%- endif %}\n        &lt;changefreq&gt;daily&lt;/changefreq&gt;\n        {#- NOTE: You can add a priority to the front matter (meta) for a page. #}\n        {#- Valid values range from 0.0 to 1.0, if no value is set the default is 0.5. #}\n        {#- reference: https://www.sitemaps.org/protocol.html #}\n        {%- if file.page.meta.priority %}\n        &lt;priority&gt;{{ file.page.meta.priority }}&lt;/priority&gt;\n        {%- endif %}\n    &lt;/url&gt;\n    {%- endif -%}\n{% endfor %}\n&lt;/urlset&gt;\n</code></pre>"},{"location":"howto/specify-locale/","title":"Specify a locale","text":"<p><code>locale</code> is a two letter ISO639 language code (f.e. <code>en</code>) or 5-letter language code with added territory/region/country (<code>en_US</code>) that <code>git-revision-date-localized</code> uses to display dates in your preferred language.</p> <p>For example:</p> <pre><code>April 27, 2021                # `locale: en` with `type: date` (default)\nApril 27, 2021 13:11:28       # `locale: en` with `type: datetime`\n2 weeks ago                   # `locale: en` with `type: timeago`\n27 de marzo de 2021           # `locale: es` with `type: date`\n27 de marzo de 2021 13:57:28  # `locale: es` with `type: datetime`\nhace 2 semanas                # `locale: es` with `type: timeago`\n</code></pre> <p>You can set the <code>locale</code> in different locations, both for your entire site and on a per-page basis. If specified multiple times <code>git-revision-date-localized</code> will use the <code>locale</code> that is most specific to a page.</p> <p>Here's the order of priority:</p>"},{"location":"howto/specify-locale/#1-page-locale-set-by-the-i18n-plugin","title":"1. Page locale set by the <code>i18n</code> plugin","text":"<p>The mkdocs-static-i18n plugin helps you support multiple language versions of your site. When enabled, <code>i18n</code> will add a <code>locale</code> attribute to each markdown page that <code>git-revision-date-localized</code> will use.</p>"},{"location":"howto/specify-locale/#2-page-locale-set-by-metadata","title":"2. Page locale set by metadata","text":"<p>The Metadata extension adds the ability to attach arbitrary key-value pairs to a document via front matter written in YAML syntax before the Markdown. Enable it in your <code>mkdocs.yml</code>:</p> <pre><code># mkdocs.yml\nmarkdown_extensions:\n  - meta\n</code></pre> <p>If set <code>git-revision-date-localized</code> will use the <code>locale</code> key in a markdown page's frontmatter, for example:</p> <pre><code>---\nlocale: en\n---\n\n# Page title\n</code></pre>"},{"location":"howto/specify-locale/#3-site-locale-set-by-your-theme","title":"3. Site locale set by your theme","text":"<p>Some MkDocs Themes support localization by setting a <code>locale</code> or <code>language</code> option. See for example the Changing the language section of Material for MkDocs.</p> <p>Example:</p> <pre><code># mkdocs.yml\ntheme:\n  language: en\n</code></pre>"},{"location":"howto/specify-locale/#4-site-locale-set-by-this-plugin","title":"4. Site locale set by this plugin","text":"<p>Of course <code>locale</code> is an option for this plugin also.</p> <pre><code>plugins:\n- git-revision-date-localized:\n    locale: en\n</code></pre>"},{"location":"howto/specify-locale/#5-fallback-locale","title":"5. Fallback locale","text":"<p>If no <code>locale</code> is specified anywhere, the fallback is English with the US date format (<code>en</code>).</p> <p>Supported locales</p> <ul> <li> <p>When used in combination with <code>type: date</code> or <code>type: datetime</code>, translation is done using babel which supports these locales</p> </li> <li> <p>When used in combination with <code>type: timeago</code> then timeago.js is added to your website, which supports these locales. If you specify a locale not supported by timeago.js, the fallback is English (<code>en</code>)</p> </li> </ul>"}]}